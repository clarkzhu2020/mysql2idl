// refer to  https://www.cloudwego.io/zh/docs/hertz/tutorials/toolkit/toolkit/
syntax = "proto3";

// setting service
package setting;

//biz/model
option go_package = "/setting";

import "api.proto";

//=========base data==========
//blank message
message Empty {}

//general ID
message IDReq {
  uint32 ID = 1;
}

//general Error Code
enum ErrCode {
  Success = 0;
  Fail = 1;
}

//general Resp
message BaseResp {
  ErrCode errCode = 1;
  string errMsg = 2;
}

//general page data
message PageInfoReq {
  uint32 page = 1;
  uint32 pageSize = 2;
}

//general status
message StatusCode {
  uint32 ID = 1;
  uint32 status = 2;
}

//==========API request Define below==========================

//table items
message Setting {

int32 id = 1;
string setting = 2;
string value = 3;
int32 status = 4;
int64 created_at = 5;
int64 updated_at = 6;


}

//repeated data for query
message Data{
    int32 page=1;
    int32 totalItems =2;
    int32 totalPage  =3;
    repeated  Setting  data = 4;
    }

//Create_service
message CreateSettingRequest{

string setting = 1;
string value = 2;
int32 status = 3;


}

message CreateSettingResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
    Setting data=3;
}

//Query_service
message QuerySettingRequest{
    string keyWord =1;
    PageInfoReq pageInfo=2;
}

message QuerySettingResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
    Data data =3;
}

//Delete_service
message DeleteSettingRequest{
    int32 id  =1;
}

message DeleteSettingResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
}

//Update_service
message UpdateSettingRequest{

int32 id = 1;
string setting  = 2;
string value  = 3;
int32 status  = 4;


}

message UpdateSettingResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
}

//Define Service Routine
service SettingService {

  rpc Create(CreateSettingRequest) returns(CreateSettingResponse){
   option (api.post) = "/api/setting/create";
  }

  rpc Query(QuerySettingRequest) returns(QuerySettingResponse){
   option (api.get) = "/api/setting/query";
  }

  rpc Delete(DeleteSettingRequest) returns(DeleteSettingResponse){
   option (api.delete) = "/api/setting/delete";
  }

  rpc Update(UpdateSettingRequest) returns(UpdateSettingResponse){
   option (api.put) = "/api/setting/update";
  }
}