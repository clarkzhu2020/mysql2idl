// Code generated by hertz generator.

package users

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	users "test/biz/model/users"
)

// Create .
// @router /api/users/create [POST]
func Create(ctx context.Context, c *app.RequestContext) {
	var err error
	var req users.CreateUsersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(users.CreateUsersResponse)

	c.JSON(consts.StatusOK, resp)
}

// Query .
// @router /api/users/query [GET]
func Query(ctx context.Context, c *app.RequestContext) {
	var err error
	var req users.QueryUsersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(users.QueryUsersResponse)

	c.JSON(consts.StatusOK, resp)
}

// Delete .
// @router /api/users/delete [DELETE]
func Delete(ctx context.Context, c *app.RequestContext) {
	var err error
	var req users.DeleteUsersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(users.DeleteUsersResponse)

	c.JSON(consts.StatusOK, resp)
}

// Update .
// @router /api/users/update [PUT]
func Update(ctx context.Context, c *app.RequestContext) {
	var err error
	var req users.UpdateUsersRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(users.UpdateUsersResponse)

	c.JSON(consts.StatusOK, resp)
}
