// refer to  https://www.cloudwego.io/zh/docs/hertz/tutorials/toolkit/toolkit/
syntax = "proto3";

// users service
package users;

//biz/model
option go_package = "/users";

import "api.proto";

//=========base data==========
//blank message
message Empty {}

//general ID
message IDReq {
  uint64 ID = 1;
}

//general Error Code
enum ErrCode {
  Success = 0;
  Fail = 1;
}

//general Resp
message BaseResp {
  ErrCode errCode = 1;
  string errMsg = 2;
}

//general page data
message PageInfoReq {
  uint64 page = 1;
  uint64 pageSize = 2;
}

//general status
message StatusCode {
  uint64 ID = 1;
  uint64 status = 2;
}

//==========API request Define below==========================

//table items
message Users {

int32 id = 1;
string name = 2;
int32 gender = 3;
int64 age = 4;
string introduce = 5;
int64 created_at = 6;
int64 updated_at = 7;
int64 deleted_at = 8;


}

//Create_service
message CreateUsersRequest{

string name = 1;
int32 gender = 2;
int64 age = 3;
string introduce = 4;


}

message CreateUsersResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
    Users data=3;
}

//Query_service
message QueryUsersRequest{
    string keyWord =1;
    PageInfoReq pageInfo=2;
}

message QueryUsersResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
    message Data{
    int32 page=1;
    int64 totalItems =2;
    int64 totalPage  =3;
    repeated  Users  data = 4;
    }
    Data data =3;
}

//Delete_service
message DeleteUsersRequest{
    int64 id  =1;
}

message DeleteUsersResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
}

//Update_service
message UpdateUsersRequest{

int32 id = 1;
string name  = 2;
int32 gender  = 3;
int64 age  = 4;
string introduce  = 5;


}

message UpdateUsersResponse{
    ErrCode errCode = 1;     //0 or 1, failed or succeed
    string msg =2;
}

//Define Service Routine
service UsersService {

  rpc Create(CreateUsersRequest) returns(CreateUsersResponse){
   option (api.post) = "/api/users/create";
  }

  rpc Query(QueryUsersRequest) returns(QueryUsersResponse){
   option (api.get) = "/api/users/query";
  }

  rpc Delete(DeleteUsersRequest) returns(DeleteUsersResponse){
   option (api.delete) = "/api/users/delete";
  }

  rpc Update(UpdateUsersRequest) returns(UpdateUsersResponse){
   option (api.put) = "/api/users/update";
  }
}